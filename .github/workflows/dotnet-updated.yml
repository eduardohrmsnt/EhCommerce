# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET
env:
  DOTNET_VERSION: 7.0.x
  SOURCE_PATH: src/EhCommerce
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: ./src
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.SOURCE_PATH }}
    - name: Build
      run: dotnet build --no-restore
      working-directory: ${{ env.SOURCE_PATH }}
  analyzis:
      needs: build
      name: Analyze
      runs-on: ubuntu-latest
      steps:
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: 17
            distribution: 'zulu' # Alternative distribution options are available.
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: Cache SonarCloud packages
          uses: actions/cache@v3
          with:
            path: ~\sonar\cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        - name: Install SonarCloud scanners
          run: |
            dotnet tool install --global dotnet-sonarscanner
        - name: Build and analyze
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: |
            dotnet-sonarscanner begin /k:"eduardohrmsnt_EhCommerce" /o:"eduardohrmsnt" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
            dotnet tool update --global dotnet-coverage
            dotnet build ${{ env.SOURCE_PATH }} --no-incremental
            dotnet-coverage collect "dotnet test ${{ env.SOURCE_PATH }}" -f xml -o "coverage.xml"
            dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  code-coverage:
      needs: analyzis
      name: Generate Code Coverage Report
      runs-on: ubuntu-latest
      steps:    
        - name: Checkout
          uses: actions/checkout@v2
        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: ${{ env.DOTNET_VERSION }}
        - name: Test
          run: dotnet test ${{ env.SOURCE_PATH }} --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
        - name: Code Coverage Report
          uses: irongut/CodeCoverageSummary@v1.3.0
          with:
            filename: coverage/**/coverage.cobertura.xml
            badge: true
            fail_below_min: true
            format: markdown
            hide_branch_rate: false
            hide_complexity: true
            indicators: true
            output: both
            thresholds: '70'
